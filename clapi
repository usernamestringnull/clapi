#!/usr/bin/bash

## Simple CLI for Clouding API written in bash.
## Change variables when needed, use https://api.clouding.io/docs/ as a reference.
## Requires jq, jtbl and csvkit (Based Debian).
## It is a personal development and independent from Clouding.io, in case of problems with the API contact with their support. 

VERSION="v1.0.1"

###########
## TITLE ##
###########

echo -e ""
echo -e "\e[1;33m\xE2\x9A\xA1\033[0m \033[0;36mClapi \033[1;34m$VERSION\033[0;36m for api.clouding.io\033[0m \e[1;33m\xE2\x9A\xA1\033[0m"
echo -e ""

############
## GLOBAL ##
############

DATE=$(date -u)
INPUT="$2"
FILE=$HOME/clouding.key
OKUNI=$'\e[32m\xe2\x9c\x93\e[0m'
KOUNI=$'\e[31m\xe2\x9c\x95\e[0m'
ARUNI=$'\e[33m\xe2\x9e\xa4\e[0m'

############
## CHECKS ##
############

echo -en "\e[33mCheck API connection...\e[0m"
CHECKAPI=$(curl -o /dev/null -sI -X GET https://api.clouding.io/v1/servers -m 1 -w '%{http_code}\n')
if [ "401" != $CHECKAPI ]; then
	echo -e "$KOUNI\e[31m No API response, check network connection or name resolution.\e[0m"
	exit 1
fi
echo -e "\e[32m OK \e[0m $OKUNI"
echo -en "\e[33mCheck version, dependencies and KEY...\e[0m"
JQ_OK=$(dpkg-query -W jq |grep -v "no packages found")
CSV_OK=$(dpkg-query -W csvkit |grep -v "no packages found")
JTBL_OK=$(pip list | grep jtbl)
if [ "" = "$JQ_OK" ]; then
	echo -e "$KOUNI \e[31mJQ no found.\e[0m"
	echo -e "Run: \e[33mapt install jq\e[0m or \e[33myum install jq\e[0m"
	exit 1
fi
if [ "" = "$CSV_OK" ]; then
	echo -e "$KOUNI \e[31mCSVKIT no found.\e[0m"
	echo -e "Run: \e[33mapt install csvkit\e[0m or \e[33myum install cvskit\e[0m"
	exit 1
fi
if [ "" = "$JTBL_OK" ]; then
	echo -e "$KOUNI \e[31mJTBL no found.\e[0m"
	echo -e "Run: \e[34mpip install jtbl\e[0m"
	exit 1
fi
if [ -f $FILE ]; then
	API_KEY=$(cat $FILE)
	KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
	while [[ ! $KEYCHECK = *200* ]]; do
		echo -e "$KOUNI\e[31m Invalid API KEY.\e[0m"
		echo -n "$ARUNI Enter valid API KEY: "
		read API_KEY
		KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
		echo $API_KEY > $HOME/clouding.key
		echo -e "$OKUNI\e[32m Added API KEY.\e[0m"
	done
else
	KEYCHECK=$(echo "null")
	while [[ ! $KEYCHECK = *200* ]]; do
		echo -e "$KOUNI\e[31m Invalid API KEY.\e[0m"
		echo -n "$ARUNI Enter valid API KEY: "
		read API_KEY
		KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
	done
	echo -e "$OKUNI\e[32m Added API KEY.\e[0m"
	echo $API_KEY > $HOME/clouding.key
fi
urlrepo="https://api.github.com/repos/usernamestringnull/clapi/tags"
tagsrepo=$(curl -s $urlrepo | jq -r '.[].name')
latest_tag=$(echo $tagsrepo | tr ' ' '\n' | sort -r | head -n1)
if [ "$VERSION" != $latest_tag ]; then
	echo -e "$KOUNI"
	echo -e "\e[31mClapi version obsolete, update it... (last version $latest_tag)\e[0m"
	exit 1
fi
echo -e "\e[32m OK \e[0m $OKUNI"
echo -e ""

############
## GLOBAL ##
############

DEFAULTFW=$(curl -sX GET "https://api.clouding.io/v1/firewalls"  -H "Accept: application/json"  -H "X-API-KEY: $API_KEY" | jq -c '.values[] | select( .name == "default") | .id' | jq -r)
DEFAULTKEY=$(curl -sX GET "https://api.clouding.io/v1/keypairs"  -H "Accept: application/json"  -H "X-API-KEY: $API_KEY" | jq -c '.values[] | select( .name == "default") | .id' | jq -r)

##########
## FUNC ##
##########

function barsh {
  [[ $# -lt 2 ]] && return 1
  local val=$1; local bas=$2; local txt=$3; local wid=$4;

  [[ -z $wid ]] && { [[ -z $txt ]] && wid=$bas || wid=${#txt} ; }
  [[ -z $txt ]] && txt="$(printf '%*s' "$wid" '')"
  [[ $wid -gt ${#txt} ]] && txt=$txt$(printf '%*s' $((${#txt} - wid)) '')

  local per=$(( (wid * val) / bas ))
  printf "\033[7m%s\033[27m%s" "${txt:0:$per}" "${txt:$per:$((wid-per))}"
}
bar () {
easeInOutSine=()
for i in $(seq 0 200); do
   easeInOutSine+=("$(LC_ALL=C; printf '%.f\n' $(bc -l <<< "- ( c ( (4 * a(1)) * ($i/100) ) - 1) * 100 / 2"))")
done

  duration=10
  interval=$(bc -l <<< "$duration / ${#easeInOutSine[@]}")
  width=100; [[ $COLUMNS -lt $width ]] && width=$COLUMNS

  printf "\n\n\n\n\033[4A\033[s"

    while true; do
      for i in "${easeInOutSine[@]}"; do
        printf "\033[u\033[?25l\033[36m%b\033[1E\033[33m%b\033[2E\033[34m%b\033[2E\033[0m\033[?25h" \
          "$(barsh $i 100 " $i %" $width)"
        sleep $interval
        if [ "$i" = "100" ]; then
          break
        fi
      done
      if [ "$i" = "100" ]; then
        break
      fi
done
}
datestart () {
	START=$(date +%s.%N)
}
finish () {
	END=$(date +%s.%N)
	DIFF=$(awk "BEGIN {printf \"%.3f\", ${END} - ${START}}")
	echo -e ""
	echo -e "\e[33mRequest completed (in $DIFF seconds).\e[0m"
}

##########
## HELP ##
##########

show_help() {
	echo -e "Usage: \033[0;36mclapi \e[1;30m[OPTIONS]\e[1;36m <INPUT or null>\e[0m
	
Options:
 -h         \e[1;30m--help\e[0m              Help menu, provides information on usage.
 -k         \e[1;30m--config-key\e[0m        Change API KEY (accept \e[1;36mINPUT\e[0m).
 -s         \e[1;30m--show-key\e[0m          Show API KEY.
 -ah        \e[1;30m--action-history\e[0m    Show actions history (last 10) or show action with input.
 -sh        \e[1;30m--server-history\e[0m    Show actions server history (last 10). 
 -ls        \e[1;30m--list-servers\e[0m      List servers and information related.
 -lssanp    \e[1;30m--list-snapshots\e[0m    List all currently available snapshots.
 -lsbck     \e[1;30m--list-backups\e[0m      List all currently available backups.
 -lsimg     \e[1;30m--list-images\e[0m       List all currently availables images.
 -start     \e[1;30m--start-server\e[0m      Start server (accept \e[1;36mINPUT\e[0m).
 -stop      \e[1;30m--stop-server\e[0m       Stop server (accept \e[1;36mINPUT\e[0m).
 -reboot    \e[1;30m--reboot-server\e[0m     Reboot server (accept \e[1;36mINPUT\e[0m).
 -hard      \e[1;30m--hard-reboot\e[0m       Hard reboot server (accept \e[1;36mINPUT\e[0m).
 -archive   \e[1;30m--archive-server\e[0m    Archive server (accept \e[1;36mINPUT\e[0m).
 -unarchive \e[1;30m--unarchive-server\e[0m  Unarchive server (accept \e[1;36mINPUT\e[0m).
 -resize    \e[1;30m--resize-server\e[0m     Resize server (accept \e[1;36mINPUT\e[0m).
 -vnc       \e[1;30m--novnc-url\e[0m         URL noVNC (accept \e[1;36mINPUT\e[0m).
 -pass      \e[1;30m--password\e[0m          Show password server (accept \e[1;36mINPUT\e[0m).
 -alla      \e[1;30m--all-archive\e[0m       Archive all servers (accept \e[1;36mINPUT\e[0m).
 -allu      \e[1;30m--all-unarchive\e[0m     Unarchive all servers (accept \e[1;36mINPUT\e[0m).
 -cs        \e[1;30m--create-server\e[0m     Create new server (accept \e[1;36mINPUT\e[0m).
 -ds        \e[1;30m--delete-server\e[0m     Delete specified server (accept \e[1;36mINPUT\e[0m).
 -csnap     \e[1;30m--create-snapshot\e[0m   Create new snapshot of specified server (accept \e[1;36mINPUT\e[0m).
 -dssnap    \e[1;30m--delete-snapshot\e[0m   Destroy specified snapshot (accept \e[1;36mINPUT\e[0m).
 -ebs       \e[1;30m--enable-backups\e[0m    Enabled Backups for server (accept \e[1;36mINPUT\e[0m).
 -dbs       \e[1;30m--disable-backups\e[0m   Disable Backups for server (accept \e[1;36mINPUT\e[0m).
 -lsr       \e[1;30m--list-fw-rules\e[0m     List firewall rules for specified group (accept \e[1;36mINPUT\e[0m).
 -lsf       \e[1;30m--list-fw-groups\e[0m    List firewall groups. To create new, use --create-fw-group.
 -cfwg      \e[1;30m--create-fw-group\e[0m   Create new firewall group.
 -cfwr      \e[1;30m--create-fw-rule\e[0m    Create new firewall rule.
 -dfwr      \e[1;30m--delete-fw-rule\e[0m    Delete specified firewall rule (accept \e[1;36mINPUT\e[0m).
 -dfwg      \e[1;30m--delete-fw-group\e[0m   Delete specified firewall group (accept \e[1;36mINPUT\e[0m).
 -er        \e[1;30m--enable-rule\e[0m       Enabled specified firewall rule (accept \e[1;36mINPUT\e[0m).
 -dr        \e[1;30m--disable-rule\e[0m      Disabled specified firewall rule (accept \e[1;36mINPUT\e[0m)." | more
}

#########
## KEY ##
#########

add_key() {
	if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter API KEY: "
		read KEY
		KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $KEY" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
		while [[ ! $KEYCHECK = *200* ]]; do
			echo -e "$KOUNI\e[31m Invalid API KEY.\e[0m"
			echo -n "$ARUNI Enter valid API KEY: "
			read KEY
			KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $KEY" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
		done
		echo -e "$OKUNI\e[32m Added API KEY.\e[0m"
		rm $HOME/clouding.key || touch $HOME/clouding.key
		echo $KEY > $HOME/clouding.key
	else
		KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $INPUT" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
		while [[ ! $KEYCHECK = *200* ]]; do
			echo -e "$KOUNI\e[31m Invalid API KEY.\e[0m"
			echo -n "$ARUNI Enter valid API KEY: "
			read INPUT
			KEYCHECK=$(curl -sIX GET -H "Content-Type: application/json" -H "X-API-KEY: $INPUT" "https://api.clouding.io/v1/sizes/volumes?page=1&pagesize=1" | grep HTTP)
		done
		echo -e "$ARUNI \e[33mEnter API KEY $INPUT...\e[0m"
		rm $HOME/clouding.key || touch $HOME/clouding.key
		echo $INPUT > $HOME/clouding.key
	fi
}
show_key() {
    echo -e "CURRENT KEY: \e[33m$API_KEY\e[0m"
}

#############
## ACTIONS ##
#############

history_actions () {
	if [ -z "$INPUT" ]; then
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" https://api.clouding.io/v1/actions?pageSize=10 | jq -r '["ID","Status","Type","Start","Finish","Resource ID","Resource Type"],(.actions[] |[.id,.status,.type,.startedAt,.completedAt,.resourceId,.resourceType]) | @tsv' | csvlook | more
	else
		CHECKID=$(curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/actions/$INPUT")
		if [[ $(echo $CHECKID | jq -r .status) == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check action ID and try again.\e[0m"
			exit 1
		else
			echo $CHECKID | jtbl
		fi
	fi		
}
history_actions_server () {
	if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter server ID: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/servers/$SID/actions?pageSize=10" | jq -r '["ID","Status","Type","Start","Finish","Resource ID","Resource Type"],(.actions[] |[.id,.status,.type,.startedAt,.completedAt,.resourceId,.resourceType]) | @tsv' | csvlook | more
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mActions server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/servers/$INPUT/actions?pageSize=10" | jq -r '["ID","Status","Type","Start","Finish","Resource ID","Resource Type"],(.actions[] |[.id,.status,.type,.startedAt,.completedAt,.resourceId,.resourceType]) | @tsv' | csvlook | more
	fi
}

#############
## SERVERS ##
#############

server_list() {
	curl -sX GET "https://api.clouding.io/v1/servers?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq '.servers |= sort_by(.name)' | jq -r '["ID","Name","Status","vCore","RAM","Disk","IP"],(.servers[] |[.id,.name,.status,.vCores,.ramGb,.volumeSizeGb,.publicIp]) | @tsv' | csvlook | more
}
server_create() {
	regex='^[a-zA-Z0-9]([-a-zA-Z0-9]{0,253}[a-zA-Z0-9])?$'
	while true; do
		echo -n "$ARUNI Enter hostname: "
		read HOSTNAME
		if [[ $HOSTNAME =~ $regex ]]; then
			break
		else
			echo -e "$KOUNI \e[31mThe hostname entered is invalid. Please try again.\e[0m"
			echo -e "The hostname cannot contain special characters, dots or hyphens at the end."
		fi
	done
	echo -n "$ARUNI Enter flavor ID: "
	read FLAVOR
	CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
	while [ -z "$CHECKFLAVOR" ]; do
		echo -e "$KOUNI \e[31mInvalid flavor. Please try again.\e[0m"
		echo -e "Enter a valid flavor, e.g. 0.5x1, 1x2, 1x4..."
		echo -n "$ARUNI Enter flavor: "
		read FLAVOR
		CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
	done
	curl -sX GET "https://api.clouding.io/v1/images?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq '.images |= sort_by(.name)' | jq -r '["ID","Name","MinimumGB"],(.images[] |[.id,.name,.minimumSizeGb]) | @tsv' | csvlook
	echo -n "$ARUNI Enter source image ID: "
	read IMAGE
	echo -n "$ARUNI Enter size volume: "
	read VOLUME
	CHECKPASS=$(curl -sX GET "https://api.clouding.io/v1/images/$IMAGE" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.accessMethods| .password' | tr -d '"')
	CHECKVOLUME=$(curl -sX GET "https://api.clouding.io/v1/images/$IMAGE" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r .minimumSizeGb | tr -d '"')
	while [ "$VOLUME" -lt "$CHECKVOLUME" ]; do
		echo -e "$KOUNI \e[31mInvalid size volume.\e[0m"
		echo -n "$ARUNI Enter size volume (mininum $CHECKVOLUME GB for the selected image): "
		read VOLUME
	done
	if [[ "$CHECKPASS" == "not-supported" ]]; then
		SERVERCS=$(curl -sX POST "https://api.clouding.io/v1/servers" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"name":"'$HOSTNAME'","hostname":"'$HOSTNAME'","flavorId":"'$FLAVOR'","firewallId":"'$DEFAULTFW'","accessConfiguration":{"password":"","savePassword":true,"sshKeyId":"'$DEFAULTKEY'"},"volume":{"source":"Image","id":"'$IMAGE'","ssdGb":"'$VOLUME'","shutDownSource":false},"enablePrivateNetwork":false,"enableStrictAntiDDoSFiltering":false}')
		echo $SERVERCS | jq .action | jtbl -m
	else
		PASS=$(openssl rand -base64 16)
		SERVERCS=$(curl -sX POST "https://api.clouding.io/v1/servers" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"name":"'$HOSTNAME'","hostname":"'$HOSTNAME'","flavorId":"'$FLAVOR'","firewallId":"'$DEFAULTFW'","accessConfiguration":{"password":"'$PASS'","savePassword":true,"sshKeyId":"'$DEFAULTKEY'"},"volume":{"source":"Image","id":"'$IMAGE'","ssdGb":"'$VOLUME'","shutDownSource":false},"enablePrivateNetwork":false,"enableStrictAntiDDoSFiltering":false}')
		echo $SERVERCS | jq .action | jtbl -m
	fi
}
server_delete() {
	if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter server ID to deleted: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[33mServer ID $INPUT deleting...\e[0m"
		echo -e ""
		curl -sX DELETE "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[33mServer ID $INPUT deleting...\e[0m"
		echo -e ""
		curl -sX DELETE "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl
	fi
}
server_start() {
	if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter server ID to start: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/servers/$SID/start" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[33mStarting server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/start" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	fi
}
server_stop() {
	if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to stop: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/servers/$SID/stop" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mStopping server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/stop" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	fi
}
server_reboot() {
	if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to reboot: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/servers/$SID/reboot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mRebooting server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/reboot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	fi
}
server_hard_reboot() {
	if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to hard reboot: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/servers/$SID/hard-reboot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mHard rebooting server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/hard-reboot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl
	fi
}
server_archive() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to archive: "
	    read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
	    curl -sX POST "https://api.clouding.io/v1/servers/$SID/archive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mArchiving server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/archive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
    fi
}
server_unarchive() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to unarchive: "
	    read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
	    curl -sX POST "https://api.clouding.io/v1/servers/$SID/unarchive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
	  else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mUnarchiving server with ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/unarchive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
    fi
}
server_allarchive() {
curl -sX GET "https://api.clouding.io/v1/servers?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '["ID","Name","Status"],(.servers[] |[.id,.name,.status]) | @tsv' | csvlook | grep -v Archived > /tmp/lsarchive
LISTS=$(cat /tmp/lsarchive | grep 'Active\|Stopped' | awk '{print $2}')
if [ "" = "$LISTS" ]; then
    echo -e "$KOUNI \e[31mNo servers to archived.\e[0m"
    exit 1
fi
for Line in $LISTS; do
	echo -e "\e[34mArchiving server ID \e[33m$Line\e[34m...\e[0m"
	curl -sX POST "https://api.clouding.io/v1/servers/$Line/archive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
	bar
done
}
server_allunarchive() {
curl -sX GET "https://api.clouding.io/v1/servers?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '["ID","Name","Status"],(.servers[] |[.id,.name,.status]) | @tsv' | csvlook | grep "Archived" > /tmp/lsarchive
LISTS=$(cat /tmp/lsarchive | awk '{print $2}')
if [ "" = "$LISTS" ]; then
    echo -e "$KOUNI\e[31mNo servers to unarchived\e[0m"
    exit 1
fi
for Line in $LISTS; do
	echo -e "\e[34mUnarchive server ID \e[33m$Line\e[34m...\e[0m"
	curl -sX POST "https://api.clouding.io/v1/servers/$Line/unarchive" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -H "Content-Length: 0" | jtbl -m
	bar
done
}
server_resize () {
	if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to resize: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -n "$ARUNI Enter flavorId: "
		read FLAVOR
		CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
		while [ -z "$CHECKFLAVOR" ]; do
			echo -e "$KOUNI \e[31mInvalid flavor. Please try again.\e[0m"
			echo -e "Enter a valid flavor, e.g. 0.5x1, 1x2, 1x4..."
			echo -n "$ARUNI Enter flavor: "
			read FLAVOR
			CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
		done
		echo -n "$ARUNI Enter GB to resize: "
		read VOLUME
		CHECKVOLUME=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r .volumeSizeGb | tr -d '"')
		while [ "$VOLUME" -lt "$CHECKVOLUME" ]; do
			echo -e "$KOUNI \e[31mInvalid size volume.\e[0m"
			echo -e "$ARUNI Enter size volume (mininum $CHECKVOLUME GB for the selected server): "
			read VOLUME
		done
		echo "\e[34mServer ID \e[33m$SID\e[34m to resize...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$SID/resize" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -d '{"flavorId":"'$FLAVOR'","volumeSizeGb":"'$VOLUME'"}' | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -n "$ARUNI Enter flavorId: "
		read FLAVOR
		CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
		while [ -z "$CHECKFLAVOR" ]; do
			echo -e "$KOUNI \e[31mInvalid flavor. Please try again.\e[0m"
			echo -e "Enter a valid flavor, e.g. 0.5x1, 1x2, 1x4..."
			echo -n "$ARUNI Enter flavor: "
			read FLAVOR
			CHECKFLAVOR=$(curl -sX GET "https://api.clouding.io/v1/sizes/flavors?page=1&pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '.flavors[]| select(.id == "'$FLAVOR'")|.id')
		done
		echo -n "$ARUNI Enter GB to resize: "
		read VOLUME
		CHECKVOLUME=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r .volumeSizeGb | tr -d '"')
		while [ "$VOLUME" -lt "$CHECKVOLUME" ]; do
			echo -e "$KOUNI \e[31mInvalid size volume.\e[0m"
			echo -e "$ARUNI Enter size volume (mininum $CHECKVOLUME GB for the selected server): "
			read VOLUME
		done
		echo "\e[34mServer ID \e[33m$INPUT\e[34m to resize...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/resize" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" "Content-Type: application/json" -d '{"flavorId":"'$FLAVOR'","volumeSizeGb":"'$VOLUME'"}' | jtbl -m
	fi
}
server_novnc () {
if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter server ID: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		if [[ "$CHECKID" != "Active" ]]; then
			echo -e "$KOUNI \e[31mServer not active, turn it on first.\e[0m"
			exit 1
		fi
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" https://api.clouding.io/v1/servers/$SID/novnc | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		if [[ "$CHECKID" != "Active" ]]; then
			echo -e "$KOUNI \e[31mServer not active, turn it on first.\e[0m"
			exit 1
		fi
		echo -e "\e[34mnoVNC for ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" https://api.clouding.io/v1/servers/$INPUT/novnc | jtbl -m
	fi
}
server_password () {
if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter server ID: "
		read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Length: 0" https://api.clouding.io/v1/servers/$SID/password | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Length: 0" https://api.clouding.io/v1/servers/$INPUT/password | jtbl -m
	fi
}

#############
## BACKUPS ##
#############

backups_list() {
	curl -sX GET "https://api.clouding.io/v1/backups?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '["ID","CreatedAt","ServerID","Server Name","Image Name","Volume"],(.backups[] |[.id,.createdAt,.serverId,.serverName,.imageName,.volumeSizeGb]) | @tsv' | csvlook
}
backups_enabled() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to enable backups: "
	    read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -n "$ARUNI Enter slots: "
	    read SLOTS
		while [ $SLOTS -lt 2 ] || [ $SLOTS -gt 30 ]; do
			echo -e "$KOUNI \e[31mMinimum 2 and maximum 30 slots, check slots and try again.\e[0"
			echo -n "$ARUNI Enter slots: "
			read SLOTS
		done
		echo -e "Enter a value between 'oneDay', 'twoDays', 'threeDays', 'fourDays', 'fiveDays', 'sixDays' or 'oneWeek' for frequency. "
		while true; do
			echo -n "$ARUNI Enter frequency: "
			read FREC
			if [ "$FREC" == "oneDay" ] || [ "$FREC" == "twoDays" ] || [ "$FREC" == "threeDays" ] || [ "$FREC" == "fourDays" ] || [ "$FREC" == "fiveDays" ] || [ "$FREC" == "sixDays" ] || [ "$FREC" == "oneWeek" ]; then
				break
			fi
		done
	    curl -sX POST "https://api.clouding.io/v1/servers/$SID/backups" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"slots":"'$SLOTS'","frequency":"'$FREC'"}' | jtbl -m
	  else
	    CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo -n "$ARUNI Enter slots: "
	    read SLOTS
		while [ $SLOTS -lt 2 ] || [ $SLOTS -gt 30 ]; do
			echo -e "$KOUNI \e[31mMinimum 2 and maximum 30 slots, check slots and try again.\e[0"
			echo -n "$ARUNI Enter slots: "
			read SLOTS
		done
		echo -e "Enter a value between 'oneDay', 'twoDays', 'threeDays', 'fourDays', 'fiveDays', 'sixDays' or 'oneWeek' for frequency. "
		while true; do
			echo -n "$ARUNI Enter frequency: "
			read FREC
			if [ "$FREC" == "oneDay" ] || [ "$FREC" == "twoDays" ] || [ "$FREC" == "threeDays" ] || [ "$FREC" == "fourDays" ] || [ "$FREC" == "fiveDays" ] || [ "$FREC" == "sixDays" ] || [ "$FREC" == "oneWeek" ]; then
				break
			fi
		done
	    curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/backups" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"slots":"'$SLOTS'","frequency":"'$FREC'"}' | jtbl -m
    fi
}
backups_disabled() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to disable backups: "
	    read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
        curl -sX DELETE "https://api.clouding.io/v1/servers/$SID/backups" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
	    echo "\e[34mDisable Backups for server ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX DELETE "https://api.clouding.io/v1/servers/$INPUT/backups" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl -m
    fi
}

############
## IMAGES ##
############

images_list() {
	curl -sX GET "https://api.clouding.io/v1/images?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '["ID","Name","MinimumGB"],(.images[] |[.id,.name,.minimumSizeGb]) | @tsv' | csvlook | more
}

###############
## SNAPSHOTS ##
###############

snapshot_list() {
	curl -sX GET "https://api.clouding.io/v1/snapshots?pageSize=200" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq -r '["ID","Name","Description","Size","Source","Date"],(.snapshots[] |[.id,.name,.description,.sizeGb,.sourceServerName,.createdAt]) | @tsv' | csvlook | more
}
snapshot_create() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter server ID to create snapshot: "
	    read SID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$SID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
	    curl -sX POST "https://api.clouding.io/v1/servers/$SID/snapshot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"shutdownServer":false,"name":"Clapi","description":"Created with Clapi"}' | jtbl -m
	  else
	    CHECKID=$(curl -sX GET "https://api.clouding.io/v1/servers/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check server ID and try again.\e[0m"
			exit 1
		fi
		echo "\e[34mCreate Snapshot for server ID \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/servers/$INPUT/snapshot" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"shutdownServer":false,"name":"Clapi","description":"Created with Clapi"}' | jtbl -m
    fi
}
snapshot_destroy() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter snapshot ID to delete: "
	    read SSID
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/snapshots/$SSID" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check snapshot ID and try again.\e[0m"
			exit 1
		fi
        curl -sX DELETE "https://api.clouding.io/v1/snapshots/$SSID" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl -m
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/snapshots/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check snapshot ID and try again.\e[0m"
			exit 1
		fi
	    echo "\e[34mDelete Snapshot \e[33m$INPUT\e[34m...\e[0m"
		curl -sX DELETE "https://api.clouding.io/v1/snapshots/$INPUT" -H "Accept: application/json" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" | jtbl -m
    fi
}

##############
## FIREWALL ##
##############

firewall_list() {
	curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/firewalls?pageSize=200" | jq -r '["ID","Name","Description"],(.values[] |[.id,.name,.description]) | @tsv' | csvlook | more
}
firewall_create() {
	echo -n "$ARUNI Enter new firewall name: "
	read NG
	echo -n "$ARUNI Enter description: "
    read DESC
	curl -sX POST https://api.clouding.io/v1/firewalls -H "Accept: application/problem+json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"name":"'$NG'","description":"'"$DESC"'"}' | jtbl -m
}
firewall_delete() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter FW ID to delete: "
	    read FW
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/$FW" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		echo "\e[34mDelete FW \e[33m$INPUT\e[34m...\e[0m"
	    curl -sX DELETE https://api.clouding.io/v1/firewalls/$FW -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" 
	  else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
	    echo "\e[34mDelete FW \e[33m$INPUT\e[34m...\e[0m"
		curl -sX DELETE https://api.clouding.io/v1/firewalls/$INPUT -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" 
    fi
}
firewall_rulelist() {
    if [ -z "$INPUT" ]; then
		echo -n "$ARUNI Enter firewall ID to view rules for: "
		read FW
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/$FW" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/firewalls/$FWG?pageSize=200" | jq -r '["ID","Description","Protocol","Port","ToPort","Source","Enabled"],(.rules[] |[.id,.description,.protocol,.portRangeMin,.portRangeMax,.sourceIp,.enabled]) | @tsv' | csvlook | more
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		echo "\e[34mEnabled rule \e[33m$INPUT\e[34m...\e[0m"
		curl -sX GET -H "Content-Type: application/json" -H "X-API-KEY: $API_KEY" "https://api.clouding.io/v1/firewalls/$INPUT?pageSize=200" | jq -r '["ID","Description","Protocol","Port","ToPort","Source","Enabled"],(.rules[] |[.id,.description,.protocol,.portRangeMin,.portRangeMax,.sourceIp,.enabled]) | @tsv' | csvlook | more
	fi
}
firewall_rulecreate() {
	echo "Creating new fw rule, please input information..."
	echo -n "$ARUNI Enter firewall ID to add rule to: "
	read FW
	CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/$FW" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
	if [[ "$CHECKID" == "404" ]]; then
		echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
		exit 1
	fi
	echo -n "$ARUNI Enter description: "
    read DESC
	while true; do
		echo -n "$ARUNI Enter protocol: "
		read PROTO
		case $PROTO in
			ah|dccp|egp|esp|gre|hopopt|icmp|igmp|ip|ipip|ospf|pgm|rsvp|sctp|tcp|udp|udplite|vrrp|[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])
				break
            ;;
			*)
				echo -e "List of protocols: ah, dccp, egp, esp, gre, hopopt, icmp, igmp, ip, ipip, ospf, pgm, rsvp, sctp, tcp, udp, udplite, vrrp, [0-255]."
				echo -e "$KOUNI \e[31mInvalid entry. Please try again.\e[0m"
            ;;
		esac
	done
	while true; do
		echo -n "$ARUNI Enter source with subnet: "
		read SIP
		if echo "$SIP" | grep -Eq '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$'; then
			break
		else
			echo -e "$KOUNI \e[31mInvalid entry. Please try again.\e[0m"
		fi
	done
	if ! [[ "$PROTO" =~ ^(dccp|sctp|tcp|udp|udplite)$ ]]; then
		curl -sX POST "https://api.clouding.io/v1/firewalls/$FW/rules" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"sourceIp":"'$SIP'","protocol":"'$PROTO'","description":"'"$DESC"'"}' | jtbl -m
	else
		while true; do
			echo -n "$ARUNI Enter minrange port: "
			read PORTMIN
			if [[ $PORTMIN -ge 1 && $PORTMIN -le 65535 ]]; then
				break
			else
				echo -e "$KOUNI \e[31mInvalid entry. Please try again.\e[0m"
			fi
		done
		while true; do
			echo -n "$ARUNI Enter maxrange port: "
			read PORTMAX
			if [[ $PORTMAX -ge $PORTMIN && $PORTMAX -le 65535 ]]; then
				break
			else
				echo -e "$KOUNI \e[31mInvalid entry. Please try again.\e[0m"
			fi
		done
		curl -sX POST "https://api.clouding.io/v1/firewalls/$FW/rules" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -d '{"sourceIp":"'$SIP'","protocol":"'$PROTO'","description":"'"$DESC"'","portRangeMin":"'$PORTMIN'","portRangeMax":"'$PORTMAX'"}' | jtbl -m
	fi
}
firewall_ruledelete() {
    if [ -z "$INPUT" ]; then
	    echo -n "$ARUNI Enter rule ID to delete: "
	    read FW
	    curl -sX DELETE "https://api.clouding.io/v1/firewalls/rules/$FW" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
	  else
	    echo -e "\e[34mDelete rule \e[33m$INPUT\e[34m...\e[0m"
		curl -sX DELETE "https://api.clouding.io/v1/firewalls/rules/$INPUT" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
    fi
}
firewall_ruleenabled () {
    if [ -z "$INPUT" ]; then
        echo -n "$ARUNI Enter rule ID to enaled: "
	    read FW
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/rules/$FW" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/firewalls/rules/$FW/enable" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
      else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/rules/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mEnabled rule \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/firewalls/rules/$INPUT/enable" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
    fi
}
firewall_ruledisabled () {
    if [ -z "$INPUT" ]; then
        echo -n "$ARUNI Enter rule ID to disabled: "
	    read FW
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/rules/$FW" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		curl -sX POST "https://api.clouding.io/v1/firewalls/rules/$FW/disable" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
    else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/firewalls/rules/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Firewall ID and try again.\e[0m"
			exit 1
		fi
		echo -e "\e[34mDisabled rule \e[33m$INPUT\e[34m...\e[0m"
		curl -sX POST "https://api.clouding.io/v1/firewalls/rules/$INPUT/disable" -H "Content-Length: 0" -H "X-API-KEY: $API_KEY" -H "Accept: application/problem+json" -I | grep HTTP
	fi
}

#########
## SSH ##
#########

list_ssh_keys() {
	if [ -z "$INPUT" ]; then
		curl -sX GET "https://api.clouding.io/v1/keypairs"  -H "Accept: application/json"  -H "X-API-KEY: $API_KEY" | jq .values | jtbl
	else
		CHECKID=$(curl -sX GET "https://api.clouding.io/v1/keypairs/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" -H "Content-Type: application/json" -H "Content-Length: 0" | jq .status)
		if [[ "$CHECKID" == "404" ]]; then
			echo -e "$KOUNI \e[31mID not found. Check Keypairs ID and try again.\e[0m"
			exit 1
		fi
		curl -sX GET "https://api.clouding.io/v1/keypairs/$INPUT" -H "Accept: application/json" -H "X-API-KEY: $API_KEY" | jtbl
	fi
}

#############
## OPTIONS ##
#############

# All command args, use --help or -h for help and usage.
case $1 in
	""|"-h"|"-help"|"--help") show_help ;;
	"--conf"|"-c") add_key ;;
    "--show-key"|"-s") datestart; show_key; finish ;;
	"--action-history"|"-ah") datestart; history_actions; finish ;;
	"--server-history"|"-sh") datestart; history_actions_server; finish ;;
		"--list-servers"|"--listserv"|"-ls") datestart; server_list; finish ;;
		"--list-snapshots"|"--listsnap"|"-lssnap") datestart; snapshot_list; finish ;;
		"--list-backups"|"--listbck"|"-lsbck") datestart; backups_list; finish ;;
		"--list-images"|"-lsimg") datestart; images_list; finish ;;
			"--start-server"|"-start") datestart; server_start; finish ;;
			"--stop-server"|"-stop") datestart; server_stop; finish ;;
			"--reboot-server"|"-reboot") datestart; server_reboot; finish ;;
			"--hard-reboot"|"-hard") datestart; server_hard_reboot; finish ;;
				"--archive-server"|"-archive") datestart; server_archive; finish ;;
				"--unarchive-server"|"-unarchive") datestart; server_unarchive; finish ;;
				"--all-archive"|"-alla"|"-as") datestart; server_allarchive; finish ;;
				"--all-unarchive"|"-allu"|"-au") datestart; server_allunarchive; finish ;;
					"--create-server"|"-cs") datestart; server_create; finish ;;
					"--delete-server"|"-ds") datestart; server_delete; finish ;;
						"--list-fw-rules"|"--listrules"|"-lsr") datestart; firewall_rulelist; finish ;;
					    "--list-fw-groups"|"--listfw"|"-lsf") datestart; firewall_list; finish ;;
						"--create-fw-group"|"--createfwg"|"-cfwg") datestart; firewall_create; finish ;;
						"--create-fw-rule"|"--createfwr"|"-cfwr") datestart; firewall_rulecreate; finish ;;
						"--delete-fw-rule"|"--deletefwr"|"-dfwr") datestart; firewall_ruledelete; finish ;;
						"--delete-fw-group"|"--deletefwg"|"-dfwg") datestart; firewall_delete; finish ;;
						"--enable-rule"|"--enabler"|"-er") datestart; firewall_ruleenabled; finish ;;
						"--disable-rule"|"--disabler"|"-dr") datestart; firewall_ruledisabled; finish ;;
							"--create-snapshot"|"--createsnap"|"-csnap") datestart; snapshot_create; finish ;;
							"--delete-snapshot"|"--deletesnap"|"-dsnap") datestart; snapshot_destroy; finish ;;
							"--enable-backups"|"-ebs") datestart; backups_enabled; finish ;;
							"--disable-backups"|"-dbs") datestart; backups_disabled; finish ;;
								"--resize-server"|"--resize"|"-r") datestart; server_resize; finish ;;
								"--novnc-url"|"-vnc") datestart; server_novnc; finish ;;
								"--password"|"-pass") datestart; server_password; finish ;;
								"--list-ssh"|"-ssh") datestart; list_ssh_keys; finish ;;
							    *) 
								   echo -e "$KOUNI \e[0;31mInvalid option, show help.\e[0m" 
								   echo -e "Run: \033[0;36mclapi --help\e[0m"
								   exit 1
								   ;;
esac
echo -e ""